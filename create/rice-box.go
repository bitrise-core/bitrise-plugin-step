// Code generated by rice embed-go; DO NOT EDIT.
package create

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file2 := &embedded.EmbeddedFile{
		Filename:    "LICENSE.gotemplate",
		FileModTime: time.Unix(1623337862, 0),

		Content: string("The MIT License (MIT)\r\n\r\nCopyright (c) {{ .Year }} {{ .Author }}\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n"),
	}
	file3 := &embedded.EmbeddedFile{
		Filename:    "README.md.gotemplate",
		FileModTime: time.Unix(1623337862, 0),

		Content: string("# {{ .Title }}\r\n\r\n{{ .Description }}\r\n\r\n\r\n## How to use this Step\r\n\r\nCan be run directly with the [bitrise CLI](https://github.com/bitrise-io/bitrise),\r\njust `git clone` this repository, `cd` into it's folder in your Terminal/Command Line\r\nand call `bitrise run test`.\r\n\r\n*Check the `bitrise.yml` file for required inputs which have to be\r\nadded to your `.bitrise.secrets.yml` file!*\r\n\r\nStep by step:\r\n\r\n1. Open up your Terminal / Command Line\r\n2. `git clone` the repository\r\n3. `cd` into the directory of the step (the one you just `git clone`d)\r\n5. Create a `.bitrise.secrets.yml` file in the same directory of `bitrise.yml`\r\n   (the `.bitrise.secrets.yml` is a git ignored file, you can store your secrets in it)\r\n6. Check the `bitrise.yml` file for any secret you should set in `.bitrise.secrets.yml`\r\n  * Best practice is to mark these options with something like `# define these in your .bitrise.secrets.yml`, in the `app:envs` section.\r\n7. Once you have all the required secret parameters in your `.bitrise.secrets.yml` you can just run this step with the [bitrise CLI](https://github.com/bitrise-io/bitrise): `bitrise run test`\r\n\r\nAn example `.bitrise.secrets.yml` file:\r\n\r\n```\r\nenvs:\r\n- A_SECRET_PARAM_ONE: the value for secret one\r\n- A_SECRET_PARAM_TWO: the value for secret two\r\n```\r\n\r\n## How to create your own step\r\n\r\n1. Create a new git repository for your step (**don't fork** the *step template*, create a *new* repository)\r\n2. Copy the [step template](https://github.com/bitrise-steplib/step-template) files into your repository\r\n3. Fill the `step.sh` with your functionality\r\n4. Wire out your inputs to `step.yml` (`inputs` section)\r\n5. Fill out the other parts of the `step.yml` too\r\n6. Provide test values for the inputs in the `bitrise.yml`\r\n7. Run your step with `bitrise run test` - if it works, you're ready\r\n\r\n__For Step development guidelines & best practices__ check this documentation: [https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md](https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md).\r\n\r\n**NOTE:**\r\n\r\nIf you want to use your step in your project's `bitrise.yml`:\r\n\r\n1. git push the step into it's repository\r\n2. reference it in your `bitrise.yml` with the `git::PUBLIC-GIT-CLONE-URL@BRANCH` step reference style:\r\n\r\n```\r\n- git::https://github.com/user/my-step.git@branch:\r\n   title: My step\r\n   inputs:\r\n   - my_input_1: \"my value 1\"\r\n   - my_input_2: \"my value 2\"\r\n```\r\n\r\nYou can find more examples of step reference styles\r\nin the [bitrise CLI repository](https://github.com/bitrise-io/bitrise/blob/master/_examples/tutorials/steps-and-workflows/bitrise.yml#L65).\r\n\r\n## How to contribute to this Step\r\n\r\n1. Fork this repository\r\n2. `git clone` it\r\n3. Create a branch you'll work on\r\n4. To use/test the step just follow the **How to use this Step** section\r\n5. Do the changes you want to\r\n6. Run/test the step before sending your contribution\r\n  * You can also test the step in your `bitrise` project, either on your Mac or on [bitrise.io](https://www.bitrise.io)\r\n  * You just have to replace the step ID in your project's `bitrise.yml` with either a relative path, or with a git URL format\r\n  * (relative) path format: instead of `- original-step-id:` use `- path::./relative/path/of/script/on/your/Mac:`\r\n  * direct git URL format: instead of `- original-step-id:` use `- git::https://github.com/user/step.git@branch:`\r\n  * You can find more example of alternative step referencing at: https://github.com/bitrise-io/bitrise/blob/master/_examples/tutorials/steps-and-workflows/bitrise.yml\r\n7. Once you're done just commit your changes & create a Pull Request\r\n\r\n\r\n## Share your own Step\r\n\r\nYou can share your Step or step version with the [bitrise CLI](https://github.com/bitrise-io/bitrise). If you use the `bitrise.yml` included in this repository, all you have to do is:\r\n\r\n1. In your Terminal / Command Line `cd` into this directory (where the `bitrise.yml` of the step is located)\r\n1. Run: `bitrise run test` to test the step\r\n1. Run: `bitrise run audit-this-step` to audit the `step.yml`\r\n1. Check the `share-this-step` workflow in the `bitrise.yml`, and fill out the\r\n   `envs` if you haven't done so already (don't forget to bump the version number if this is an update\r\n   of your step!)\r\n1. Then run: `bitrise run share-this-step` to share the step (version) you specified in the `envs`\r\n1. Send the Pull Request, as described in the logs of `bitrise run share-this-step`\r\n\r\nThat's all ;)\r\n"),
	}
	file5 := &embedded.EmbeddedFile{
		Filename:    "bash/step.sh.gotemplate",
		FileModTime: time.Unix(1623337862, 0),

		Content: string("#!/bin/bash\r\nset -ex\r\n\r\necho \"This is the value specified for the input 'example_step_input': ${example_step_input}\"\r\n\r\n#\r\n# --- Export Environment Variables for other Steps:\r\n# You can export Environment Variables for other Steps with\r\n#  envman, which is automatically installed by `bitrise setup`.\r\n# A very simple example:\r\nenvman add --key EXAMPLE_STEP_OUTPUT --value 'the value you want to share'\r\n# Envman can handle piped inputs, which is useful if the text you want to\r\n# share is complex and you don't want to deal with proper bash escaping:\r\n#  cat file_with_complex_input | envman add --KEY EXAMPLE_STEP_OUTPUT\r\n# You can find more usage examples on envman's GitHub page\r\n#  at: https://github.com/bitrise-io/envman\r\n\r\n#\r\n# --- Exit codes:\r\n# The exit code of your Step is very important. If you return\r\n#  with a 0 exit code `bitrise` will register your Step as \"successful\".\r\n# Any non zero exit code will be registered as \"failed\" by `bitrise`.\r\n"),
	}
	file6 := &embedded.EmbeddedFile{
		Filename:    "bitrise.secrets.yml.gotemplate",
		FileModTime: time.Unix(1623337862, 0),

		Content: string("envs:\r\n- A_SECRET_PARAM: \"A secret Value\"\r\n"),
	}
	file7 := &embedded.EmbeddedFile{
		Filename:    "bitrise.yml.gotemplate",
		FileModTime: time.Unix(1623337862, 0),

		Content: string("format_version: 4\r\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\r\n\r\napp:\r\n  envs:\r\n  # An example secret param, define it (A_SECRET_PARAM) in .bitrise.secrets.yml\r\n  - A_SECRET_PARAM: $A_SECRET_PARAM\r\n  # If you want to share this step into a StepLib\r\n  - BITRISE_STEP_ID: {{ .ID }}\r\n  - BITRISE_STEP_VERSION: \"0.0.1\"\r\n  - BITRISE_STEP_GIT_CLONE_URL: {{ .SourceCodeURL }}.git\r\n  - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL\r\n\r\nworkflows:\r\n  test:\r\n    steps:\r\n    - script:\r\n        inputs:\r\n        - content: |\r\n            #!/bin/bash\r\n            echo \"Just an example 'secrets' print.\"\r\n            echo \"The value of 'A_SECRET_PARAM' is: $A_SECRET_PARAM\"\r\n    - change-workdir:\r\n        title: Switch working dir to test / _tmp dir\r\n        description: |-\r\n          To prevent step testing issues, like referencing relative\r\n          files with just './some-file' in the step's code, which would\r\n          work for testing the step from this directory directly\r\n          but would break if the step is included in another `bitrise.yml`.\r\n        run_if: true\r\n        inputs:\r\n        - path: ./_tmp\r\n        - is_create_path: true\r\n    - path::./:\r\n        title: Step Test\r\n        description: |-\r\n          The example input has a default value,\r\n          you can overwrite it if you want to, just like we did below,\r\n          but the step would use the default value specified in the `step.yml`\r\n          file if you would not specify another value.\r\n        run_if: true\r\n        inputs:\r\n        - example_step_input: Example Step Input's value\r\n    - script:\r\n        inputs:\r\n        - content: |\r\n            #!/bin/bash\r\n            echo \"This output was generated by the Step (EXAMPLE_STEP_OUTPUT): $EXAMPLE_STEP_OUTPUT\"\r\n\r\n\r\n  # ----------------------------------------------------------------\r\n  # --- workflows to Share this step into a Step Library\r\n  audit-this-step:\r\n    steps:\r\n    - script:\r\n        inputs:\r\n        - content: |-\r\n            #!/bin/bash\r\n            set -ex\r\n            stepman audit --step-yml ./step.yml\r\n\r\n  share-this-step:\r\n    envs:\r\n      # if you want to share this step into a StepLib\r\n      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL\r\n      - BITRISE_STEP_ID: $BITRISE_STEP_ID\r\n      - BITRISE_STEP_VERSION: $BITRISE_STEP_VERSION\r\n      - BITRISE_STEP_GIT_CLONE_URL: $BITRISE_STEP_GIT_CLONE_URL\r\n    description: |-\r\n      If this is the first time you try to share a Step you should\r\n      first call: $ bitrise share\r\n\r\n      This will print you a guide, and information about how Step sharing\r\n      works. Please read it at least once!\r\n\r\n      As noted in the Step sharing guide you'll have to fork the\r\n      StepLib you want to share this step into. Once you're done with forking\r\n      the repository you should set your own fork's git clone URL\r\n      in the `.bitrise.secrets.yml` file, or here in the `envs` section,\r\n      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.\r\n\r\n      You're now ready to share this Step, just make sure that\r\n      the `BITRISE_STEP_ID` and `BITRISE_STEP_VERSION`\r\n      environments are set to the desired values!\r\n\r\n      To share this Step into a StepLib you can just run: $ bitrise run share-this-step\r\n\r\n      Once it finishes the only thing left is to actually create a Pull Request,\r\n      the way described in the guide printed at the end of the process.\r\n    before_run:\r\n    - audit-this-step\r\n    steps:\r\n    - script:\r\n        inputs:\r\n        - content: |-\r\n            #!/bin/bash\r\n            set -ex\r\n            bitrise share start -c \"${MY_STEPLIB_REPO_FORK_GIT_URL}\"\r\n            bitrise share create --stepid \"${BITRISE_STEP_ID}\" --tag \"${BITRISE_STEP_VERSION}\" --git \"${BITRISE_STEP_GIT_CLONE_URL}\"\r\n            bitrise share finish\r\n"),
	}
	file8 := &embedded.EmbeddedFile{
		Filename:    "gitignore.gotemplate",
		FileModTime: time.Unix(1623337862, 0),

		Content: string(".bitrise*\r\n.gows.user.yml\r\n"),
	}
	filea := &embedded.EmbeddedFile{
		Filename:    "go/main.go.gotemplate",
		FileModTime: time.Unix(1623337862, 0),

		Content: string("package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"os\"\r\n\t\"os/exec\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Println(\"This is the value specified for the input 'example_step_input':\", os.Getenv(\"example_step_input\"))\r\n\r\n\t//\r\n\t// --- Step Outputs: Export Environment Variables for other Steps:\r\n\t// You can export Environment Variables for other Steps with\r\n\t//  envman, which is automatically installed by `bitrise setup`.\r\n\t// A very simple example:\r\n\tcmdLog, err := exec.Command(\"bitrise\", \"envman\", \"add\", \"--key\", \"EXAMPLE_STEP_OUTPUT\", \"--value\", \"the value you want to share\").CombinedOutput()\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"Failed to expose output with envman, error: %#v | output: %s\", err, cmdLog)\r\n\t\tos.Exit(1)\r\n\t}\r\n\t// You can find more usage examples on envman's GitHub page\r\n\t//  at: https://github.com/bitrise-io/envman\r\n\r\n\t//\r\n\t// --- Exit codes:\r\n\t// The exit code of your Step is very important. If you return\r\n\t//  with a 0 exit code `bitrise` will register your Step as \"successful\".\r\n\t// Any non zero exit code will be registered as \"failed\" by `bitrise`.\r\n\tos.Exit(0)\r\n}\r\n"),
	}
	fileb := &embedded.EmbeddedFile{
		Filename:    "step.yml.gotemplate",
		FileModTime: time.Unix(1623337862, 0),

		Content: string("#\r\n# A couple of useful guides & docs:\r\n#\r\n# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs\r\n# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md\r\n# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md\r\n# - Bitrise docs: http://devcenter.bitrise.io/\r\n# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/\r\n\r\ntitle: |-\r\n  {{ .Title }}\r\nsummary: |\r\n  {{ .Summary }}\r\ndescription: |\r\n  {{ .Description }}\r\nwebsite: {{ .WebsiteURL }}\r\nsource_code_url: {{ .SourceCodeURL }}\r\nsupport_url: {{ .SupportURL }}\r\nhost_os_tags:\r\n  - osx-10.10\r\n  - ubuntu-16.04\r\n\r\n# If this step should be available only for certain project types\r\n# just uncomment this `project_type_tags` section and include all the\r\n# project types supported by the step. If the step can be used for all\r\n# project types then you can just remove this section.\r\n# If no `project_type_tags` specified (or specified as an empty array)\r\n# that means the step can be used for any project type.\r\n# You can find more information about project type tags in the Step Development Guideline:\r\n# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md\r\n#\r\n# project_type_tags:\r\n#   - ios\r\n#   - macos\r\n#   - android\r\n#   - xamarin\r\n#   - react-native\r\n#   - cordova\r\n#   - ionic\r\n\r\n# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.\r\n# You can find more information about type tags in the Step Development Guideline:\r\n# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md\r\ntype_tags:\r\n  - {{ .PrimaryTypeTag }}\r\n\r\nis_requires_admin_user: true\r\nis_always_run: false\r\nis_skippable: false\r\nrun_if: \"\"\r\n\r\ndeps:\r\n  brew:\r\n  - name: git\r\n  - name: wget\r\n  apt_get:\r\n  - name: git\r\n  - name: wget\r\n\r\n{{ if eq .ToolkitType \"bash\" }}\r\ntoolkit:\r\n  bash:\r\n    entry_file: step.sh\r\n{{ else if eq .ToolkitType \"go\" }}\r\ntoolkit:\r\n  go:\r\n    package_name: {{ .GoToolkitInventory.PackageID }}\r\n{{ end }}\r\n\r\ninputs:\r\n  - example_step_input: Default Value - you can leave this empty if you want to\r\n    opts:\r\n      title: \"Example Step Input\"\r\n      summary: Summary. No more than 2-3 sentences.\r\n      description: |\r\n        Description of this input.\r\n\r\n        Can be Markdown formatted text.\r\n      is_expand: true\r\n      is_required: true\r\n      value_options: []\r\n\r\noutputs:\r\n  - EXAMPLE_STEP_OUTPUT:\r\n    opts:\r\n      title: \"Example Step Output\"\r\n      summary: Summary. No more than 2-3 sentences.\r\n      description: |\r\n        Description of this output.\r\n\r\n        Can be Markdown formatted text.\r\n"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1623337862, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file2, // "LICENSE.gotemplate"
			file3, // "README.md.gotemplate"
			file6, // "bitrise.secrets.yml.gotemplate"
			file7, // "bitrise.yml.gotemplate"
			file8, // "gitignore.gotemplate"
			fileb, // "step.yml.gotemplate"

		},
	}
	dir4 := &embedded.EmbeddedDir{
		Filename:   "bash",
		DirModTime: time.Unix(1623337862, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file5, // "bash/step.sh.gotemplate"

		},
	}
	dir9 := &embedded.EmbeddedDir{
		Filename:   "go",
		DirModTime: time.Unix(1623337862, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filea, // "go/main.go.gotemplate"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{
		dir4, // "bash"
		dir9, // "go"

	}
	dir4.ChildDirs = []*embedded.EmbeddedDir{}
	dir9.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`templates`, &embedded.EmbeddedBox{
		Name: `templates`,
		Time: time.Unix(1623337862, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":     dir1,
			"bash": dir4,
			"go":   dir9,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"LICENSE.gotemplate":             file2,
			"README.md.gotemplate":           file3,
			"bash/step.sh.gotemplate":        file5,
			"bitrise.secrets.yml.gotemplate": file6,
			"bitrise.yml.gotemplate":         file7,
			"gitignore.gotemplate":           file8,
			"go/main.go.gotemplate":          filea,
			"step.yml.gotemplate":            fileb,
		},
	})
}
